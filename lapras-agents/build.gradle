group 'kr.ac.kaist.cdsn'
version '1.1-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        // Required for ftp4j
        url 'https://raw.github.com/asbachb/mvn-repo/master/releases'
    }
}

compileJava {
    options.compilerArgs << '-parameters'
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile group: 'org.mongodb', name: 'mongodb-driver-legacy', version: '3.9.0'
    compile group: 'com.pi4j', name: 'pi4j-core', version: '1.1'
    compile group: 'it.sauronsoftware.ftp4j', name: 'ftp4j', version: '1.7.2'
    compile group: 'org.json', name: 'json', version: '20160810'
    compile group: 'com.mashape.unirest', name: 'unirest-java', version:'1.4.9'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.4.1'
    compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version:'4.1'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version:'4.5'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version:'4.4.1'
    compile files('libs/tinyb.jar')
    compile files('libs/philips-hue-sdk-1.11.2.jar')
    compile files('libs/philips-hue-sdk-resources-1.11.2.jar')
    compile files('libs/phidget21.jar')
    compile files('libs/m2mKorea.jar')
    compile files('libs/MineLibrary.jar')
    compile project(':lapras-middleware')
}

sourceSets {
    main {
        resources {
            exclude '*'
        }
    }
}

tasks.withType(Jar) {
    destinationDir = file("$buildDir/install")
}

task copyDependencies(type: Copy) {
    from configurations.runtime
    into "$buildDir/install/lib"
}

task copyResources(type: Copy) {
    from "src/main/resources"
    into "$buildDir/install/resources"
}

task compileRunScript(type: Copy) {
    from "scripts"
    into "$buildDir/install"
    include "run.sh.template"
    include "run.bat.template"
    include "update.sh.template"
    rename{ String filename -> filename.replace(".template", "") }
    expand([jarName: jar.archiveName])
}

processResources.dependsOn(compileRunScript)
task makeInstall(dependsOn: [jar, copyDependencies, copyResources])

def runnableClasses = [
        'kr.ac.kaist.cdsn.lapras.agents.test.TestAgent',
        'kr.ac.kaist.cdsn.lapras.agents.service.n1seminarroom825.LightService',
        'kr.ac.kaist.cdsn.lapras.agents.service.n1seminarroom825.DoorService',
        'kr.ac.kaist.cdsn.lapras.agents.service.n1seminarroom825.PresenceSensorService',
        'kr.ac.kaist.cdsn.lapras.agents.presence.PresenceDataServer',
        'kr.ac.kaist.cdsn.lapras.agents.service.n1seminarroom825.AmbientSensorService',
        'kr.ac.kaist.cdsn.lapras.agents.service.n1seminarroom825.PodiumService',
        'kr.ac.kaist.cdsn.lapras.agents.service.n1seminarroom825.AirconService',
        'kr.ac.kaist.cdsn.lapras.agents.service.n1seminarroom825.AlertService',
        'kr.ac.kaist.cdsn.lapras.agents.service.n1seminarroom825.DataCollectorService',
        'kr.ac.kaist.cdsn.lapras.agents.service.n1seminarroom825.SeatService',
        'kr.ac.kaist.cdsn.lapras.agents.service.n1seminarroom825.ProjectorService',
        'kr.ac.kaist.cdsn.lapras.agents.service.n1seminarroom825.WhiteboardService',
        'kr.ac.kaist.cdsn.lapras.agents.service.n1seminarroom825.BeaconDetectorService',
]
runnableClasses.each { String runnableClass ->
    def className = runnableClass.split("\\.")[-1]
    task "run$className"(type: JavaExec) {
        main = runnableClass
        classpath = sourceSets.main.runtimeClasspath
        jvmArgs = ["-Duser.resourcedir=$projectDir/src/main/resources"]
    }
}
