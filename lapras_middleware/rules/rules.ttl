@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix lapras: <http://lapras.org/rule/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# --- Aircon Rules (Keep as they are) ---
lapras:AirconOnWhenNearRule a lapras:Rule ;
    lapras:hasAgent "aircon" ;
    lapras:hasCondition lapras:IsNearCondition ;
    lapras:hasAction lapras:SetAirconPowerOn .
lapras:IsNearCondition
    lapras:hasSensor "proximity_status" ; lapras:hasOperator lapras:equals ; lapras:hasValue "near" .
lapras:SetAirconPowerOn lapras:hasStateUpdate '{"power": "on"}' .

lapras:AirconOffWhenFarRule a lapras:Rule ;
    lapras:hasAgent "aircon" ;
    lapras:hasCondition lapras:IsFarCondition ;
    lapras:hasAction lapras:SetAirconPowerOff .
lapras:IsFarCondition
    lapras:hasSensor "proximity_status" ; lapras:hasOperator lapras:equals ; lapras:hasValue "far" .
lapras:SetAirconPowerOff lapras:hasStateUpdate '{"power": "off"}' .

# --- Microwave Sequential Door Rules (Simplified) ---
# Scenario: If MW is idle: Agent tracks door open for >= 3s (sets internal flag published as door_sequence_pending_closure).
# Then, if door is closed for >= 5s AND flag is true, rule tells agent to auto-cook 7s.

# Rule S1: This rule is effectively replaced by the agent's internal logic setting
# microwave/door_sequence_pending_closure to true when door is open >= 3s AND state is idle.
# The agent will publish this boolean state.

# Rule S2: If the sequence is pending closure (door was open long enough),
# microwave is idle, door is now closed, and has been closed for >= 5 seconds,
# then trigger the auto-cook.
lapras:MW_TriggerAutoCookAfterDoorSequenceRule a lapras:Rule ;
    lapras:hasAgent "microwave_1" ;
    lapras:hasCondition lapras:MW_Cond_StateIsIdle_S2R, 
                        lapras:MW_Cond_SeqIsPendingClosure_S2R, # Checks the agent's flag
                        lapras:MW_Cond_DoorIsClosed_S2R, 
                        lapras:MW_Cond_DoorClosedDuration5s_S2R ;
    lapras:hasAction lapras:MW_Action_TellAgentToAutoCook_S2R .

lapras:MW_Cond_StateIsIdle_S2R a lapras:Condition ;
    lapras:hasSensor "microwave/state" ; lapras:hasOperator lapras:equals ; lapras:hasValue "idle" .
lapras:MW_Cond_SeqIsPendingClosure_S2R a lapras:Condition ;
    lapras:hasSensor "microwave/door_sequence_pending_closure" ; # Agent sets this to true/false
    lapras:hasOperator lapras:equals ; 
    lapras:hasValue "true"^^xsd:boolean . # Rules check for boolean true
lapras:MW_Cond_DoorIsClosed_S2R a lapras:Condition ;
    lapras:hasSensor "microwave/door_status" ; lapras:hasOperator lapras:equals ; lapras:hasValue "closed" .
lapras:MW_Cond_DoorClosedDuration5s_S2R a lapras:Condition ;
    lapras:hasSensor "microwave/current_door_closed_duration" ; lapras:hasOperator lapras:greaterThanOrEqual ; lapras:hasValue "5"^^xsd:integer .

lapras:MW_Action_TellAgentToAutoCook_S2R a lapras:Action ;
    # This action tells the agent (via its _on_message) to start its internal 7s cooking.
    # It also includes a display message update that the agent will pick up.
    lapras:hasStateUpdate '{"microwave/trigger_auto_cook_7s": true, "display_message": "Sequence complete. Starting auto-cook..."}' .

# Rule R1 (Reset): If the door re-opens WHILE the sequence flag is pending_closure.
# The agent itself also has logic to reset _door_was_open_long_enough if door is not open.
# This rule provides an explicit reset from the RuleExecutor side if needed.
lapras:MW_Seq_ResetIfDoorReopenedDuringPending_R1R a lapras:Rule ;
    lapras:hasAgent "microwave_1" ;
    lapras:hasCondition lapras:MW_Cond_DoorIsOpen_S1R, 
                        lapras:MW_Cond_SeqIsPendingClosure_S2R ; # Sequence was pending
    lapras:hasAction lapras:MW_Action_ResetSequenceWithMessage_R1R .

lapras:MW_Cond_DoorIsOpen_S1R a lapras:Condition ; # Re-using condition URI for door is open
    lapras:hasSensor "microwave/door_status" ; lapras:hasOperator lapras:equals ; lapras:hasValue "open" .

lapras:MW_Action_ResetSequenceWithMessage_R1R a lapras:Action ;
    # Rule sets sequence_pending_closure to false, agent will see this.
    lapras:hasStateUpdate '{"microwave/door_sequence_pending_closure": false, "display_message": "Sequence reset: Door was re-opened."}' .


# Rule to reset microwave state from "interrupted" or "ready" back to "idle" once door is closed/opened appropriately.
# Agent's perception now handles this transition more directly.
# These rules can serve as a backup or for other specific transitions to idle.
lapras:MW_ResetFromInterruptedWhenDoorClosedRule a lapras:Rule;
    lapras:hasAgent "microwave_1";
    lapras:hasCondition lapras:MW_Cond_StateIsInterrupted_RSTR, lapras:MW_Cond_DoorIsClosed_S2R;
    lapras:hasAction lapras:MW_Action_SetStateToIdleGeneral_RSTR .
lapras:MW_Cond_StateIsInterrupted_RSTR a lapras:Condition;
    lapras:hasSensor "microwave/state"; lapras:hasOperator lapras:equals; lapras:hasValue "interrupted".
lapras:MW_Action_SetStateToIdleGeneral_RSTR a lapras:Action;
    lapras:hasStateUpdate '{"microwave/state": "idle", "display_message": "Microwave reset to idle."}'.

lapras:MW_ResetFromReadyWhenDoorOpenedRule a lapras:Rule;
    lapras:hasAgent "microwave_1";
    lapras:hasCondition lapras:MW_Cond_StateIsReady_RSTR, lapras:MW_Cond_DoorIsOpen_S1R;
    lapras:hasAction lapras:MW_Action_SetStateToIdleGeneral_RSTR .
lapras:MW_Cond_StateIsReady_RSTR a lapras:Condition;
    lapras:hasSensor "microwave/state"; lapras:hasOperator lapras:equals; lapras:hasValue "ready".